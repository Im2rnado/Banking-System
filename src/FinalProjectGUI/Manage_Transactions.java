/**
 *
 * @author Ibrahim, Yassin, Islam, Hatem, and Khattab
 */
package FinalProjectGUI;

import FinalProjectClasses.*;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Manage_Transactions extends javax.swing.JFrame {

    private Customer customer;
    private Manager manager;
    private Staff staff;
    private List<Transaction> transactionList;

    /**
     * Creates new form Transaction_Management
     */
    public Manage_Transactions(Customer customer) {
        this.customer = customer;
        this.transactionList = customer.getTransactions();
        initComponents();
        loadTransactions();
    }

    public Manage_Transactions(Manager manager) {
        this.manager = manager;
        this.transactionList = new DatabaseManager().fetchTransactions();
        initComponents();
        loadTransactions();
    }

    public Manage_Transactions(Staff staff) {
        this.staff = staff;
        this.transactionList = new DatabaseManager().fetchTransactions();
        initComponents();
        loadTransactions();
    }

    private void loadTransactions() {
        DefaultTableModel model = (DefaultTableModel) transactionTable.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Transaction transaction : transactionList) {
            model.addRow(new Object[]{transaction.getTransactionId(), transaction.getTransactionType(), transaction.getAmount(), transaction.getSourceAccount().getAccountId(), transaction.getDate()});
        }
    }

    private Transaction findTransactionById(String transactionId) {
        for (Transaction transaction : transactionList) {
            if (transaction.getTransactionId().equals(transactionId)) {
                return transaction;
            }
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        searchLabel = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        transactionPane = new javax.swing.JScrollPane();
        transactionTable = new javax.swing.JTable();
        newTransactionButton = new javax.swing.JButton();
        viewDetailsButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBackground(new java.awt.Color(204, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        titleLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        titleLabel.setText("Manage Transactions");

        searchLabel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        searchLabel.setText("Search");

        searchField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(searchLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(titleLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(searchLabel)
                                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );

        transactionTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null},
                    {null, null, null, null, null}
                },
                new String[]{
                    "ID", "Type", "Amount", "Account", "Date"
                }
        ));
        transactionPane.setViewportView(transactionTable);

        newTransactionButton.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        newTransactionButton.setText("New Transaction");
        newTransactionButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTransactionButtonActionPerformed(evt);
            }
        });

        viewDetailsButton.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        viewDetailsButton.setText("View Details");
        viewDetailsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        viewDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsButtonActionPerformed(evt);
            }
        });

        returnButton.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        returnButton.setText("Return");
        returnButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        exitButton.setText("Exit");
        exitButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addContainerGap(24, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(transactionPane, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(viewDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(newTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(28, 28, 28)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(returnButton, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                                        .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(18, 18, 18))
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(transactionPane, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(viewDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(newTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(exitButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        String searchText = searchField.getText().trim().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) transactionTable.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Transaction transaction : transactionList) {
            if (transaction.getTransactionId().toLowerCase().contains(searchText)
                    || transaction.getTransactionType().toLowerCase().contains(searchText)) {
                model.addRow(new Object[]{transaction.getTransactionId(), transaction.getTransactionType(), transaction.getAmount(), transaction.getSourceAccount().getAccountId(), transaction.getDate()});
            }
        }
    }//GEN-LAST:event_searchFieldActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        if (customer != null) {
            Customer_Dashboard cd = new Customer_Dashboard(customer);
            cd.setVisible(true);
        } else if (manager != null) {
            Manager_Dashboard md = new Manager_Dashboard(manager);
            md.setVisible(true);
        } else if (staff != null) {
            Staff_Dashboard ad = new Staff_Dashboard(staff);
            ad.setVisible(true);
        }
        dispose();
    }//GEN-LAST:event_returnButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void newTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTransactionButtonActionPerformed
        javax.swing.JPanel panel = new javax.swing.JPanel();
        javax.swing.JLabel amountLabel = new javax.swing.JLabel("Amount:");
        javax.swing.JTextField amountField = new javax.swing.JTextField(10);
        javax.swing.JLabel typeLabel = new javax.swing.JLabel("Type (Deposit/Withdraw/Transfer):");
        javax.swing.JComboBox<String> typeField = new javax.swing.JComboBox<>(new String[]{"Deposit", "Withdraw", "Transfer"});
        javax.swing.JLabel sourceLabel = new javax.swing.JLabel("Account ID:");
        javax.swing.JTextField sourceField = new javax.swing.JTextField(10);
        javax.swing.JLabel targetLabel = new javax.swing.JLabel("Transfer Account ID:");
        javax.swing.JTextField targetField = new javax.swing.JTextField(10);

        // Initially hide target fields
        targetLabel.setVisible(false);
        targetField.setVisible(false);

        // Add listener for type selection
        typeField.addItemListener(e -> {
            boolean isTransfer = "Transfer".equals(typeField.getSelectedItem());
            targetLabel.setVisible(isTransfer);
            targetField.setVisible(isTransfer);
            panel.revalidate();
            panel.repaint();
        });

        panel.setLayout(new java.awt.GridLayout(4, 2, 5, 5));
        panel.add(amountLabel);
        panel.add(amountField);
        panel.add(typeLabel);
        panel.add(typeField);
        panel.add(sourceLabel);
        panel.add(sourceField);
        panel.add(targetLabel);
        panel.add(targetField);

        int result = javax.swing.JOptionPane.showConfirmDialog(
                this,
                panel,
                "New Transaction",
                javax.swing.JOptionPane.OK_CANCEL_OPTION,
                javax.swing.JOptionPane.PLAIN_MESSAGE
        );

        if (result == javax.swing.JOptionPane.OK_OPTION) {
            try {
                String transactionId = "TR" + UUID.randomUUID().toString().toUpperCase().substring(0, 6);
                double amount = Double.parseDouble(amountField.getText());
                String type = typeField.getSelectedItem().toString().trim().toLowerCase();
                String accountId = sourceField.getText().trim();
                Account account = customer.getAccountById(accountId);
                String targetAccountId = targetField.getText().trim();
                Account targetAccount = targetAccountId.isEmpty() ? account : new DatabaseManager().fetchAccountById(targetAccountId);
                Date date = new Date();

                if (accountId.isEmpty()) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Account ID is required for transfer.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }

                Transaction Tr = new Transaction(transactionId, type, amount, account, targetAccount, date);
                System.out.println(Tr.getTransactionDetails());

                switch (type) {
                    case "deposit":
                        if (Tr.processTransaction()) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Deposit successful.");
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(this, "Error with depositing.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case "withdraw":
                        if (Tr.processTransaction()) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Withdrawal successful.");
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(this, "Insufficient balance.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case "transfer":
                        if (targetAccountId.isEmpty()) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Target account is required for transfer.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else if (Tr.processTransaction()) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Transfer successful.");
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(this, "Transfer failed. Check balance or account ID.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    default:
                        javax.swing.JOptionPane.showMessageDialog(this, "Invalid transaction type. Use Deposit, Withdraw, or Transfer.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        break;
                }

                customer.getTransactions();
                loadTransactions();  // Refresh the transaction table after a new transaction

            } catch (NumberFormatException e) {
                javax.swing.JOptionPane.showMessageDialog(this, "Please enter a valid numeric amount.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_newTransactionButtonActionPerformed

    private void viewDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsButtonActionPerformed
        int selectedRow = transactionTable.getSelectedRow();
        if (selectedRow != -1) {
            String transactionId = (String) transactionTable.getValueAt(selectedRow, 0);
            Transaction transaction = findTransactionById(transactionId);
            if (transaction != null) {
                JOptionPane.showMessageDialog(this, transaction.getTransactionDetails(), "Transaction Details", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a transaction to view details.");
        }

    }//GEN-LAST:event_viewDetailsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manage_Transactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manage_Transactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manage_Transactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manage_Transactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            private Customer customer;

            public void run() {
                new Manage_Transactions(this.customer).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton newTransactionButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JScrollPane transactionPane;
    private javax.swing.JTable transactionTable;
    private javax.swing.JButton viewDetailsButton;
    // End of variables declaration//GEN-END:variables
}
